# Yet another raylib wrapper for Ruby
#
# * https://github.com/vaiorabbit/raylib-bindings
#
# [NOTICE] Autogenerated. Do not edit.

require 'ffi'

module Raylib
  extend FFI::Library

  # Define/Macro

  RAYGUI_VERSION = "3.2"
  SCROLLBAR_LEFT_SIDE = 0
  SCROLLBAR_RIGHT_SIDE = 1

  # Enum

  # enum GuiState
  # Gui control state
  STATE_NORMAL = 0
  STATE_FOCUSED = 1
  STATE_PRESSED = 2
  STATE_DISABLED = 3

  # enum GuiTextAlignment
  # Gui control text alignment
  TEXT_ALIGN_LEFT = 0
  TEXT_ALIGN_CENTER = 1
  TEXT_ALIGN_RIGHT = 2

  # enum GuiControl
  # Gui controls
  DEFAULT = 0
  LABEL = 1 # Used also for: LABELBUTTON
  BUTTON = 2
  TOGGLE = 3 # Used also for: TOGGLEGROUP
  SLIDER = 4 # Used also for: SLIDERBAR
  PROGRESSBAR = 5
  CHECKBOX = 6
  COMBOBOX = 7
  DROPDOWNBOX = 8
  TEXTBOX = 9 # Used also for: TEXTBOXMULTI
  VALUEBOX = 10
  SPINNER = 11 # Uses: BUTTON, VALUEBOX
  LISTVIEW = 12
  COLORPICKER = 13
  SCROLLBAR = 14
  STATUSBAR = 15

  # enum GuiControlProperty
  # Gui base properties for every control
  BORDER_COLOR_NORMAL = 0
  BASE_COLOR_NORMAL = 1
  TEXT_COLOR_NORMAL = 2
  BORDER_COLOR_FOCUSED = 3
  BASE_COLOR_FOCUSED = 4
  TEXT_COLOR_FOCUSED = 5
  BORDER_COLOR_PRESSED = 6
  BASE_COLOR_PRESSED = 7
  TEXT_COLOR_PRESSED = 8
  BORDER_COLOR_DISABLED = 9
  BASE_COLOR_DISABLED = 10
  TEXT_COLOR_DISABLED = 11
  BORDER_WIDTH = 12
  TEXT_PADDING = 13
  TEXT_ALIGNMENT = 14
  RESERVED = 15

  # enum GuiDefaultProperty
  # DEFAULT extended properties
  TEXT_SIZE = 16 # Text size (glyphs max height)
  TEXT_SPACING = 17 # Text spacing between glyphs
  LINE_COLOR = 18 # Line control color
  BACKGROUND_COLOR = 19 # Background color

  # enum GuiToggleProperty
  # Toggle/ToggleGroup
  GROUP_PADDING = 16 # ToggleGroup separation between toggles

  # enum GuiSliderProperty
  # Slider/SliderBar
  SLIDER_WIDTH = 16 # Slider size of internal bar
  SLIDER_PADDING = 17 # Slider/SliderBar internal bar padding

  # enum GuiProgressBarProperty
  # ProgressBar
  PROGRESS_PADDING = 16 # ProgressBar internal padding

  # enum GuiScrollBarProperty
  # ScrollBar
  ARROWS_SIZE = 16
  ARROWS_VISIBLE = 17
  SCROLL_SLIDER_PADDING = 18 # (SLIDERBAR, SLIDER_PADDING)
  SCROLL_SLIDER_SIZE = 19
  SCROLL_PADDING = 20
  SCROLL_SPEED = 21

  # enum GuiCheckBoxProperty
  # CheckBox
  CHECK_PADDING = 16 # CheckBox internal check padding

  # enum GuiComboBoxProperty
  # ComboBox
  COMBO_BUTTON_WIDTH = 16 # ComboBox right button width
  COMBO_BUTTON_SPACING = 17 # ComboBox button separation

  # enum GuiDropdownBoxProperty
  # DropdownBox
  ARROW_PADDING = 16 # DropdownBox arrow separation from border and items
  DROPDOWN_ITEMS_SPACING = 17 # DropdownBox items separation

  # enum GuiTextBoxProperty
  # TextBox/TextBoxMulti/ValueBox/Spinner
  TEXT_INNER_PADDING = 16 # TextBox/TextBoxMulti/ValueBox/Spinner inner text padding
  TEXT_LINES_SPACING = 17 # TextBoxMulti lines separation

  # enum GuiSpinnerProperty
  # Spinner
  SPIN_BUTTON_WIDTH = 16 # Spinner left/right buttons width
  SPIN_BUTTON_SPACING = 17 # Spinner buttons separation

  # enum GuiListViewProperty
  # ListView
  LIST_ITEMS_HEIGHT = 16 # ListView items height
  LIST_ITEMS_SPACING = 17 # ListView items separation
  SCROLLBAR_WIDTH = 18 # ListView scrollbar size (usually width)
  SCROLLBAR_SIDE = 19 # ListView scrollbar side (0-left, 1-right)

  # enum GuiColorPickerProperty
  # ColorPicker
  COLOR_SELECTOR_SIZE = 16
  HUEBAR_WIDTH = 17 # ColorPicker right hue bar width
  HUEBAR_PADDING = 18 # ColorPicker right hue bar separation from panel
  HUEBAR_SELECTOR_HEIGHT = 19 # ColorPicker right hue bar selector height
  HUEBAR_SELECTOR_OVERFLOW = 20 # ColorPicker right hue bar selector overflow

  # enum GuiIconName
  # 
  ICON_NONE = 0
  ICON_FOLDER_FILE_OPEN = 1
  ICON_FILE_SAVE_CLASSIC = 2
  ICON_FOLDER_OPEN = 3
  ICON_FOLDER_SAVE = 4
  ICON_FILE_OPEN = 5
  ICON_FILE_SAVE = 6
  ICON_FILE_EXPORT = 7
  ICON_FILE_ADD = 8
  ICON_FILE_DELETE = 9
  ICON_FILETYPE_TEXT = 10
  ICON_FILETYPE_AUDIO = 11
  ICON_FILETYPE_IMAGE = 12
  ICON_FILETYPE_PLAY = 13
  ICON_FILETYPE_VIDEO = 14
  ICON_FILETYPE_INFO = 15
  ICON_FILE_COPY = 16
  ICON_FILE_CUT = 17
  ICON_FILE_PASTE = 18
  ICON_CURSOR_HAND = 19
  ICON_CURSOR_POINTER = 20
  ICON_CURSOR_CLASSIC = 21
  ICON_PENCIL = 22
  ICON_PENCIL_BIG = 23
  ICON_BRUSH_CLASSIC = 24
  ICON_BRUSH_PAINTER = 25
  ICON_WATER_DROP = 26
  ICON_COLOR_PICKER = 27
  ICON_RUBBER = 28
  ICON_COLOR_BUCKET = 29
  ICON_TEXT_T = 30
  ICON_TEXT_A = 31
  ICON_SCALE = 32
  ICON_RESIZE = 33
  ICON_FILTER_POINT = 34
  ICON_FILTER_BILINEAR = 35
  ICON_CROP = 36
  ICON_CROP_ALPHA = 37
  ICON_SQUARE_TOGGLE = 38
  ICON_SYMMETRY = 39
  ICON_SYMMETRY_HORIZONTAL = 40
  ICON_SYMMETRY_VERTICAL = 41
  ICON_LENS = 42
  ICON_LENS_BIG = 43
  ICON_EYE_ON = 44
  ICON_EYE_OFF = 45
  ICON_FILTER_TOP = 46
  ICON_FILTER = 47
  ICON_TARGET_POINT = 48
  ICON_TARGET_SMALL = 49
  ICON_TARGET_BIG = 50
  ICON_TARGET_MOVE = 51
  ICON_CURSOR_MOVE = 52
  ICON_CURSOR_SCALE = 53
  ICON_CURSOR_SCALE_RIGHT = 54
  ICON_CURSOR_SCALE_LEFT = 55
  ICON_UNDO = 56
  ICON_REDO = 57
  ICON_REREDO = 58
  ICON_MUTATE = 59
  ICON_ROTATE = 60
  ICON_REPEAT = 61
  ICON_SHUFFLE = 62
  ICON_EMPTYBOX = 63
  ICON_TARGET = 64
  ICON_TARGET_SMALL_FILL = 65
  ICON_TARGET_BIG_FILL = 66
  ICON_TARGET_MOVE_FILL = 67
  ICON_CURSOR_MOVE_FILL = 68
  ICON_CURSOR_SCALE_FILL = 69
  ICON_CURSOR_SCALE_RIGHT_FILL = 70
  ICON_CURSOR_SCALE_LEFT_FILL = 71
  ICON_UNDO_FILL = 72
  ICON_REDO_FILL = 73
  ICON_REREDO_FILL = 74
  ICON_MUTATE_FILL = 75
  ICON_ROTATE_FILL = 76
  ICON_REPEAT_FILL = 77
  ICON_SHUFFLE_FILL = 78
  ICON_EMPTYBOX_SMALL = 79
  ICON_BOX = 80
  ICON_BOX_TOP = 81
  ICON_BOX_TOP_RIGHT = 82
  ICON_BOX_RIGHT = 83
  ICON_BOX_BOTTOM_RIGHT = 84
  ICON_BOX_BOTTOM = 85
  ICON_BOX_BOTTOM_LEFT = 86
  ICON_BOX_LEFT = 87
  ICON_BOX_TOP_LEFT = 88
  ICON_BOX_CENTER = 89
  ICON_BOX_CIRCLE_MASK = 90
  ICON_POT = 91
  ICON_ALPHA_MULTIPLY = 92
  ICON_ALPHA_CLEAR = 93
  ICON_DITHERING = 94
  ICON_MIPMAPS = 95
  ICON_BOX_GRID = 96
  ICON_GRID = 97
  ICON_BOX_CORNERS_SMALL = 98
  ICON_BOX_CORNERS_BIG = 99
  ICON_FOUR_BOXES = 100
  ICON_GRID_FILL = 101
  ICON_BOX_MULTISIZE = 102
  ICON_ZOOM_SMALL = 103
  ICON_ZOOM_MEDIUM = 104
  ICON_ZOOM_BIG = 105
  ICON_ZOOM_ALL = 106
  ICON_ZOOM_CENTER = 107
  ICON_BOX_DOTS_SMALL = 108
  ICON_BOX_DOTS_BIG = 109
  ICON_BOX_CONCENTRIC = 110
  ICON_BOX_GRID_BIG = 111
  ICON_OK_TICK = 112
  ICON_CROSS = 113
  ICON_ARROW_LEFT = 114
  ICON_ARROW_RIGHT = 115
  ICON_ARROW_DOWN = 116
  ICON_ARROW_UP = 117
  ICON_ARROW_LEFT_FILL = 118
  ICON_ARROW_RIGHT_FILL = 119
  ICON_ARROW_DOWN_FILL = 120
  ICON_ARROW_UP_FILL = 121
  ICON_AUDIO = 122
  ICON_FX = 123
  ICON_WAVE = 124
  ICON_WAVE_SINUS = 125
  ICON_WAVE_SQUARE = 126
  ICON_WAVE_TRIANGULAR = 127
  ICON_CROSS_SMALL = 128
  ICON_PLAYER_PREVIOUS = 129
  ICON_PLAYER_PLAY_BACK = 130
  ICON_PLAYER_PLAY = 131
  ICON_PLAYER_PAUSE = 132
  ICON_PLAYER_STOP = 133
  ICON_PLAYER_NEXT = 134
  ICON_PLAYER_RECORD = 135
  ICON_MAGNET = 136
  ICON_LOCK_CLOSE = 137
  ICON_LOCK_OPEN = 138
  ICON_CLOCK = 139
  ICON_TOOLS = 140
  ICON_GEAR = 141
  ICON_GEAR_BIG = 142
  ICON_BIN = 143
  ICON_HAND_POINTER = 144
  ICON_LASER = 145
  ICON_COIN = 146
  ICON_EXPLOSION = 147
  ICON_1UP = 148
  ICON_PLAYER = 149
  ICON_PLAYER_JUMP = 150
  ICON_KEY = 151
  ICON_DEMON = 152
  ICON_TEXT_POPUP = 153
  ICON_GEAR_EX = 154
  ICON_CRACK = 155
  ICON_CRACK_POINTS = 156
  ICON_STAR = 157
  ICON_DOOR = 158
  ICON_EXIT = 159
  ICON_MODE_2D = 160
  ICON_MODE_3D = 161
  ICON_CUBE = 162
  ICON_CUBE_FACE_TOP = 163
  ICON_CUBE_FACE_LEFT = 164
  ICON_CUBE_FACE_FRONT = 165
  ICON_CUBE_FACE_BOTTOM = 166
  ICON_CUBE_FACE_RIGHT = 167
  ICON_CUBE_FACE_BACK = 168
  ICON_CAMERA = 169
  ICON_SPECIAL = 170
  ICON_LINK_NET = 171
  ICON_LINK_BOXES = 172
  ICON_LINK_MULTI = 173
  ICON_LINK = 174
  ICON_LINK_BROKE = 175
  ICON_TEXT_NOTES = 176
  ICON_NOTEBOOK = 177
  ICON_SUITCASE = 178
  ICON_SUITCASE_ZIP = 179
  ICON_MAILBOX = 180
  ICON_MONITOR = 181
  ICON_PRINTER = 182
  ICON_PHOTO_CAMERA = 183
  ICON_PHOTO_CAMERA_FLASH = 184
  ICON_HOUSE = 185
  ICON_HEART = 186
  ICON_CORNER = 187
  ICON_VERTICAL_BARS = 188
  ICON_VERTICAL_BARS_FILL = 189
  ICON_LIFE_BARS = 190
  ICON_INFO = 191
  ICON_CROSSLINE = 192
  ICON_HELP = 193
  ICON_FILETYPE_ALPHA = 194
  ICON_FILETYPE_HOME = 195
  ICON_LAYERS_VISIBLE = 196
  ICON_LAYERS = 197
  ICON_WINDOW = 198
  ICON_HIDPI = 199
  ICON_FILETYPE_BINARY = 200
  ICON_HEX = 201
  ICON_SHIELD = 202
  ICON_FILE_NEW = 203
  ICON_FOLDER_ADD = 204
  ICON_ALARM = 205
  ICON_CPU = 206
  ICON_ROM = 207
  ICON_STEP_OVER = 208
  ICON_STEP_INTO = 209
  ICON_STEP_OUT = 210
  ICON_RESTART = 211
  ICON_BREAKPOINT_ON = 212
  ICON_BREAKPOINT_OFF = 213
  ICON_BURGER_MENU = 214
  ICON_CASE_SENSITIVE = 215
  ICON_REG_EXP = 216
  ICON_FOLDER = 217
  ICON_FILE = 218
  ICON_219 = 219
  ICON_220 = 220
  ICON_221 = 221
  ICON_222 = 222
  ICON_223 = 223
  ICON_224 = 224
  ICON_225 = 225
  ICON_226 = 226
  ICON_227 = 227
  ICON_228 = 228
  ICON_229 = 229
  ICON_230 = 230
  ICON_231 = 231
  ICON_232 = 232
  ICON_233 = 233
  ICON_234 = 234
  ICON_235 = 235
  ICON_236 = 236
  ICON_237 = 237
  ICON_238 = 238
  ICON_239 = 239
  ICON_240 = 240
  ICON_241 = 241
  ICON_242 = 242
  ICON_243 = 243
  ICON_244 = 244
  ICON_245 = 245
  ICON_246 = 246
  ICON_247 = 247
  ICON_248 = 248
  ICON_249 = 249
  ICON_250 = 250
  ICON_251 = 251
  ICON_252 = 252
  ICON_253 = 253
  ICON_254 = 254
  ICON_255 = 255


  # Typedef

  typedef :int, :GuiState
  typedef :int, :GuiTextAlignment
  typedef :int, :GuiControl
  typedef :int, :GuiControlProperty
  typedef :int, :GuiDefaultProperty
  typedef :int, :GuiToggleProperty
  typedef :int, :GuiSliderProperty
  typedef :int, :GuiProgressBarProperty
  typedef :int, :GuiScrollBarProperty
  typedef :int, :GuiCheckBoxProperty
  typedef :int, :GuiComboBoxProperty
  typedef :int, :GuiDropdownBoxProperty
  typedef :int, :GuiTextBoxProperty
  typedef :int, :GuiSpinnerProperty
  typedef :int, :GuiListViewProperty
  typedef :int, :GuiColorPickerProperty
  typedef :int, :GuiIconName

  # Struct

  # Style property
  class GuiStyleProp < FFI::Struct
    layout(
      :controlId, :ushort,
      :propertyId, :ushort,
      :propertyValue, :uint,
    )
  end


  # Function

  def self.setup_raygui_symbols
    entries = [

      # GuiEnable : Enable gui controls (global state)
      # @return [void]
      [:GuiEnable, :GuiEnable, [], :void],

      # GuiDisable : Disable gui controls (global state)
      # @return [void]
      [:GuiDisable, :GuiDisable, [], :void],

      # GuiLock : Lock gui controls (global state)
      # @return [void]
      [:GuiLock, :GuiLock, [], :void],

      # GuiUnlock : Unlock gui controls (global state)
      # @return [void]
      [:GuiUnlock, :GuiUnlock, [], :void],

      # GuiIsLocked : Check if gui is locked (global state)
      # @return [bool]
      [:GuiIsLocked, :GuiIsLocked, [], :bool],

      # GuiFade : Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f
      # @param alpha [float]
      # @return [void]
      [:GuiFade, :GuiFade, [:float], :void],

      # GuiSetState : Set gui state (global state)
      # @param state [int]
      # @return [void]
      [:GuiSetState, :GuiSetState, [:int], :void],

      # GuiGetState : Get gui state (global state)
      # @return [int]
      [:GuiGetState, :GuiGetState, [], :int],

      # GuiSetFont : Set gui custom font (global state)
      # @param font [Font]
      # @return [void]
      [:GuiSetFont, :GuiSetFont, [Font.by_value], :void],

      # GuiGetFont : Get gui custom font (global state)
      # @return [Font]
      [:GuiGetFont, :GuiGetFont, [], Font.by_value],

      # GuiSetStyle : Set one style property
      # @param control [int]
      # @param property [int]
      # @param value [int]
      # @return [void]
      [:GuiSetStyle, :GuiSetStyle, [:int, :int, :int], :void],

      # GuiGetStyle : Get one style property
      # @param control [int]
      # @param property [int]
      # @return [int]
      [:GuiGetStyle, :GuiGetStyle, [:int, :int], :int],

      # GuiWindowBox : Window Box control, shows a window that can be closed
      # @param bounds [Rectangle]
      # @param title [const char *]
      # @return [bool]
      [:GuiWindowBox, :GuiWindowBox, [Rectangle.by_value, :pointer], :bool],

      # GuiGroupBox : Group Box control with text name
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @return [void]
      [:GuiGroupBox, :GuiGroupBox, [Rectangle.by_value, :pointer], :void],

      # GuiLine : Line separator control, could contain text
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @return [void]
      [:GuiLine, :GuiLine, [Rectangle.by_value, :pointer], :void],

      # GuiPanel : Panel control, useful to group controls
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @return [void]
      [:GuiPanel, :GuiPanel, [Rectangle.by_value, :pointer], :void],

      # GuiTabBar : Tab Bar control, returns TAB to be closed or -1
      # @param bounds [Rectangle]
      # @param text [const char **]
      # @param count [int]
      # @param active [int *]
      # @return [int]
      [:GuiTabBar, :GuiTabBar, [Rectangle.by_value, :pointer, :int, :pointer], :int],

      # GuiScrollPanel : Scroll Panel control
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param content [Rectangle]
      # @param scroll [Vector2 *]
      # @return [Rectangle]
      [:GuiScrollPanel, :GuiScrollPanel, [Rectangle.by_value, :pointer, Rectangle.by_value, :pointer], Rectangle.by_value],

      # GuiLabel : Label control, shows text
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @return [void]
      [:GuiLabel, :GuiLabel, [Rectangle.by_value, :pointer], :void],

      # GuiButton : Button control, returns true when clicked
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @return [bool]
      [:GuiButton, :GuiButton, [Rectangle.by_value, :pointer], :bool],

      # GuiLabelButton : Label button control, show true when clicked
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @return [bool]
      [:GuiLabelButton, :GuiLabelButton, [Rectangle.by_value, :pointer], :bool],

      # GuiToggle : Toggle Button control, returns true when active
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param active [bool]
      # @return [bool]
      [:GuiToggle, :GuiToggle, [Rectangle.by_value, :pointer, :bool], :bool],

      # GuiToggleGroup : Toggle Group control, returns active toggle index
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param active [int]
      # @return [int]
      [:GuiToggleGroup, :GuiToggleGroup, [Rectangle.by_value, :pointer, :int], :int],

      # GuiCheckBox : Check Box control, returns true when active
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param checked [bool]
      # @return [bool]
      [:GuiCheckBox, :GuiCheckBox, [Rectangle.by_value, :pointer, :bool], :bool],

      # GuiComboBox : Combo Box control, returns selected item index
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param active [int]
      # @return [int]
      [:GuiComboBox, :GuiComboBox, [Rectangle.by_value, :pointer, :int], :int],

      # GuiDropdownBox : Dropdown Box control, returns selected item
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param active [int *]
      # @param editMode [bool]
      # @return [bool]
      [:GuiDropdownBox, :GuiDropdownBox, [Rectangle.by_value, :pointer, :pointer, :bool], :bool],

      # GuiSpinner : Spinner control, returns selected value
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param value [int *]
      # @param minValue [int]
      # @param maxValue [int]
      # @param editMode [bool]
      # @return [bool]
      [:GuiSpinner, :GuiSpinner, [Rectangle.by_value, :pointer, :pointer, :int, :int, :bool], :bool],

      # GuiValueBox : Value Box control, updates input text with numbers
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param value [int *]
      # @param minValue [int]
      # @param maxValue [int]
      # @param editMode [bool]
      # @return [bool]
      [:GuiValueBox, :GuiValueBox, [Rectangle.by_value, :pointer, :pointer, :int, :int, :bool], :bool],

      # GuiTextBox : Text Box control, updates input text
      # @param bounds [Rectangle]
      # @param text [char *]
      # @param textSize [int]
      # @param editMode [bool]
      # @return [bool]
      [:GuiTextBox, :GuiTextBox, [Rectangle.by_value, :pointer, :int, :bool], :bool],

      # GuiTextBoxMulti : Text Box control with multiple lines
      # @param bounds [Rectangle]
      # @param text [char *]
      # @param textSize [int]
      # @param editMode [bool]
      # @return [bool]
      [:GuiTextBoxMulti, :GuiTextBoxMulti, [Rectangle.by_value, :pointer, :int, :bool], :bool],

      # GuiSlider : Slider control, returns selected value
      # @param bounds [Rectangle]
      # @param textLeft [const char *]
      # @param textRight [const char *]
      # @param value [float]
      # @param minValue [float]
      # @param maxValue [float]
      # @return [float]
      [:GuiSlider, :GuiSlider, [Rectangle.by_value, :pointer, :pointer, :float, :float, :float], :float],

      # GuiSliderBar : Slider Bar control, returns selected value
      # @param bounds [Rectangle]
      # @param textLeft [const char *]
      # @param textRight [const char *]
      # @param value [float]
      # @param minValue [float]
      # @param maxValue [float]
      # @return [float]
      [:GuiSliderBar, :GuiSliderBar, [Rectangle.by_value, :pointer, :pointer, :float, :float, :float], :float],

      # GuiProgressBar : Progress Bar control, shows current progress value
      # @param bounds [Rectangle]
      # @param textLeft [const char *]
      # @param textRight [const char *]
      # @param value [float]
      # @param minValue [float]
      # @param maxValue [float]
      # @return [float]
      [:GuiProgressBar, :GuiProgressBar, [Rectangle.by_value, :pointer, :pointer, :float, :float, :float], :float],

      # GuiStatusBar : Status Bar control, shows info text
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @return [void]
      [:GuiStatusBar, :GuiStatusBar, [Rectangle.by_value, :pointer], :void],

      # GuiDummyRec : Dummy control for placeholders
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @return [void]
      [:GuiDummyRec, :GuiDummyRec, [Rectangle.by_value, :pointer], :void],

      # GuiGrid : Grid control, returns mouse cell position
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param spacing [float]
      # @param subdivs [int]
      # @return [Vector2]
      [:GuiGrid, :GuiGrid, [Rectangle.by_value, :pointer, :float, :int], Vector2.by_value],

      # GuiListView : List View control, returns selected list item index
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param scrollIndex [int *]
      # @param active [int]
      # @return [int]
      [:GuiListView, :GuiListView, [Rectangle.by_value, :pointer, :pointer, :int], :int],

      # GuiListViewEx : List View with extended parameters
      # @param bounds [Rectangle]
      # @param text [const char **]
      # @param count [int]
      # @param focus [int *]
      # @param scrollIndex [int *]
      # @param active [int]
      # @return [int]
      [:GuiListViewEx, :GuiListViewEx, [Rectangle.by_value, :pointer, :int, :pointer, :pointer, :int], :int],

      # GuiMessageBox : Message Box control, displays a message
      # @param bounds [Rectangle]
      # @param title [const char *]
      # @param message [const char *]
      # @param buttons [const char *]
      # @return [int]
      [:GuiMessageBox, :GuiMessageBox, [Rectangle.by_value, :pointer, :pointer, :pointer], :int],

      # GuiTextInputBox : Text Input Box control, ask for text, supports secret
      # @param bounds [Rectangle]
      # @param title [const char *]
      # @param message [const char *]
      # @param buttons [const char *]
      # @param text [char *]
      # @param textMaxSize [int]
      # @param secretViewActive [int *]
      # @return [int]
      [:GuiTextInputBox, :GuiTextInputBox, [Rectangle.by_value, :pointer, :pointer, :pointer, :pointer, :int, :pointer], :int],

      # GuiColorPicker : Color Picker control (multiple color controls)
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param color [Color]
      # @return [Color]
      [:GuiColorPicker, :GuiColorPicker, [Rectangle.by_value, :pointer, Color.by_value], Color.by_value],

      # GuiColorPanel : Color Panel control
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param color [Color]
      # @return [Color]
      [:GuiColorPanel, :GuiColorPanel, [Rectangle.by_value, :pointer, Color.by_value], Color.by_value],

      # GuiColorBarAlpha : Color Bar Alpha control
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param alpha [float]
      # @return [float]
      [:GuiColorBarAlpha, :GuiColorBarAlpha, [Rectangle.by_value, :pointer, :float], :float],

      # GuiColorBarHue : Color Bar Hue control
      # @param bounds [Rectangle]
      # @param text [const char *]
      # @param value [float]
      # @return [float]
      [:GuiColorBarHue, :GuiColorBarHue, [Rectangle.by_value, :pointer, :float], :float],

      # GuiLoadStyle : Load style file over global style variable (.rgs)
      # @param fileName [const char *]
      # @return [void]
      [:GuiLoadStyle, :GuiLoadStyle, [:pointer], :void],

      # GuiLoadStyleDefault : Load style default over global style
      # @return [void]
      [:GuiLoadStyleDefault, :GuiLoadStyleDefault, [], :void],

      # GuiEnableTooltip : Enable gui tooltips (global state)
      # @return [void]
      [:GuiEnableTooltip, :GuiEnableTooltip, [], :void],

      # GuiDisableTooltip : Disable gui tooltips (global state)
      # @return [void]
      [:GuiDisableTooltip, :GuiDisableTooltip, [], :void],

      # GuiSetTooltip : Set tooltip string
      # @param tooltip [const char *]
      # @return [void]
      [:GuiSetTooltip, :GuiSetTooltip, [:pointer], :void],

      # GuiIconText : Get text with icon id prepended (if supported)
      # @param iconId [int]
      # @param text [const char *]
      # @return [const char *]
      [:GuiIconText, :GuiIconText, [:int, :pointer], :pointer],

      # GuiGetIcons : Get raygui icons data pointer
      # @return [unsigned int *]
      [:GuiGetIcons, :GuiGetIcons, [], :pointer],

      # GuiLoadIcons : Load raygui icons file (.rgi) into internal icons data
      # @param fileName [const char *]
      # @param loadIconsName [bool]
      # @return [char **]
      [:GuiLoadIcons, :GuiLoadIcons, [:pointer, :bool], :pointer],

      # GuiDrawIcon
      # @param iconId [int]
      # @param posX [int]
      # @param posY [int]
      # @param pixelSize [int]
      # @param color [Color]
      # @return [void]
      [:GuiDrawIcon, :GuiDrawIcon, [:int, :int, :int, :int, Color.by_value], :void],
    ]
    entries.each do |entry|
      attach_function entry[0], entry[1], entry[2], entry[3]
    rescue FFI::NotFoundError => e
      warn "[Warning] Failed to import #{entry[0]} (#{e})."
    end
  end
end
